# This workflow combines Bandit (via third-party wrapper), Ruff, and Pylint with SARIF output

name: Python Static Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Uncomment below to run weekly on Wednesday at 21:32 UTC
  # schedule:
  #   - cron: '32 21 * * 3'

jobs:
  bandit:
    name: Bandit Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - uses: actions/checkout@v4

      - name: Bandit Scan
        uses: shundor/python-bandit-scan@ab1d87dfccc5a0ffab88be3aaac6ffe35c10d6cd
        with:
          exit_zero: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ruff:
    name: Ruff - Linter
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - run: pip install ruff

      - name: Run Ruff with SARIF output
        run: |
          ruff check . --output-format sarif > ruff-results.sarif || true

      - name: Upload Ruff SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ruff-results.sarif

  pylint:
    name: Pylint - Static Code Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Pylint and SARIF converter
        run: |
          pip install pylint

      - name: Run Pylint and generate SARIF
        run: |
          pylint $(git ls-files '*.py')

      - uses: Silleellie/pylint-github-action@v2.1
        with:
          
          # Path of the package(s) or python file(s) to lint, relative to the repository root. 
          # If more than one package (or python file) should be linted, simply specify all of them 
          # with the multi-line notation like so:
          # lint-path: |
          #   src
          #   other_src
          #   main.py
          #   ...
          # 
          # Required
          lint-path: src
          
          # Version of the Python interpreter which will install all requirements of your project 
          # and lint the package(s) or python file(s) specified with the `lint-path` argument
          #
          # Required
          python-version: 3.9
      
          # Path of the requirements of your project, relative to the repository root. 
          # This can be easily changed in case you have `requirements-dev.txt`
          #
          # Optional, Default: requirements.txt
          requirements-path: requirements.txt
          
          # Path of the README.md to update with the pylint badge, relative to the repository root.
          #
          # Optional, Default: README.md
          readme-path: README.md
          
          # Path of the .pylintrc file containing custom lint rules to use, relative to the repository root.
          # In case it is not specified, the standard lint rules are used 
          #
          # Optional, Default: ''
          pylintrc-path: .pylintrc
      
          # Text to display in the badge
          #
          # Optional, Default: PyLint
          badge-text: PyLint
      
          # Color of the badge for pylint scores < 5.
          # Hex, rgb, rgba, hsl, hsla and css named colors can all be used
          #
          # Optional, Default: red
          color-bad-score: red
      
          # Color of the badge for pylint scores in range [5,8).
          # Hex, rgb, rgba, hsl, hsla and css named colors can all be used
          #
          # Optional, Default: orange
          color-ok-score: orange
      
          # Color of the badge for pylint scores in range [8,10).
          # Hex, rgb, rgba, hsl, hsla and css named colors can all be used
          #
          # Optional, Default: yellow
          color-good-score: yellow
      
          # Color of the badge for pylint scores == 10.
          # Hex, rgb, rgba, hsl, hsla and css named colors can all be used
          #
          # Optional, Default: brightgreen
          color-perfect-score: brightgreen
